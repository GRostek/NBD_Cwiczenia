MongoDB shell version v4.4.1
connecting to: mongodb://127.0.0.1:27017/nbd?compressors=disabled&gssapiServiceName=mongodb
Implicit session: session { "id" : UUID("82169094-fa17-424a-bf11-5344a79088d6") }
MongoDB server version: 4.4.1
{
	"_batch" : [
		{
			"_id" : "unique_jobs",
			"unique_jobs" : [
				"Developer III",
				"Computer Systems Analyst II",
				"Budget/Accounting Analyst I",
				"Accounting Assistant I",
				"Web Developer III",
				"Registered Nurse",
				"Project Manager",
				"Design Engineer",
				"Structural Analysis Engineer",
				"Account Representative I",
				"Pharmacist",
				"Librarian",
				"Web Designer II",
				"Geologist III",
				"Engineer IV",
				"Electrical Engineer",
				"Research Assistant I",
				"Nurse Practicioner",
				"Staff Accountant II",
				"Software Engineer IV",
				"Human Resources Assistant I",
				"Staff Accountant I",
				"Web Designer I",
				"Accounting Assistant II",
				"Senior Developer",
				"Statistician II",
				"Database Administrator III",
				"Web Developer IV",
				"Human Resources Assistant III",
				"Accountant II",
				"Staff Accountant III",
				"Product Engineer",
				"Community Outreach Specialist",
				"Human Resources Assistant IV",
				"Environmental Specialist",
				"Account Representative IV",
				"Help Desk Operator",
				"Media Manager IV",
				"Professor",
				"Automation Specialist II",
				"Office Assistant IV",
				"Graphic Designer",
				"Recruiting Manager",
				"Accounting Assistant III",
				"Programmer Analyst I",
				"Research Associate",
				"Safety Technician II",
				"Sales Representative",
				"Help Desk Technician",
				"Senior Cost Accountant",
				"Quality Engineer",
				"Budget/Accounting Analyst IV",
				"Geologist I",
				"Web Developer I",
				"GIS Technical Architect",
				"Account Representative III",
				"Engineer II",
				"Budget/Accounting Analyst III",
				"Software Engineer II",
				"Senior Sales Associate",
				"Desktop Support Technician",
				"Nuclear Power Engineer",
				"Cost Accountant",
				"Developer IV",
				"Accounting Assistant IV",
				"Programmer Analyst IV",
				"Account Executive",
				"Social Worker",
				"Financial Advisor",
				"Editor",
				"Software Engineer III",
				"Actuary",
				"Assistant Manager",
				"Automation Specialist III",
				"Human Resources Manager",
				"Food Chemist",
				"Teacher",
				"Computer Systems Analyst III",
				"Engineer I",
				"Programmer I",
				"Administrative Assistant II",
				"Programmer Analyst III",
				"Marketing Assistant",
				"Developer I",
				"Recruiter",
				"Web Developer II",
				"Speech Pathologist",
				"Financial Analyst",
				"Software Test Engineer IV",
				"Administrative Assistant I",
				"Health Coach I",
				"Safety Technician I",
				"Compensation Analyst",
				"Business Systems Development Analyst",
				"Web Designer III",
				"VP Marketing",
				"Nurse",
				"Quality Control Specialist",
				"Software Test Engineer II",
				"Health Coach II",
				"Software Test Engineer I",
				"Senior Financial Analyst",
				"VP Product Management",
				"VP Sales",
				"Environmental Tech",
				"Senior Editor",
				"Programmer IV",
				"Marketing Manager",
				"Payment Adjustment Coordinator",
				"Office Assistant II",
				"Administrative Assistant III",
				"Paralegal",
				"Systems Administrator IV",
				"Automation Specialist I",
				"Media Manager I",
				"Programmer Analyst II",
				"Information Systems Manager",
				"Geologist IV",
				"Chemical Engineer",
				"Software Test Engineer III",
				"Administrative Officer",
				"Computer Systems Analyst I",
				"Engineer III",
				"Programmer II",
				"Biostatistician IV",
				"Health Coach III",
				"Structural Engineer",
				"Database Administrator II",
				"Systems Administrator III",
				"Assistant Professor",
				"Research Nurse",
				"Database Administrator I",
				"Account Coordinator",
				"Research Assistant IV",
				"Technical Writer",
				"Biostatistician III",
				"Staff Accountant IV",
				"Software Engineer I",
				"Data Coordiator",
				"Web Designer IV",
				"Senior Quality Engineer",
				"Office Assistant III",
				"Associate Professor",
				"Software Consultant",
				"Programmer III",
				"Automation Specialist IV",
				"Legal Assistant",
				"Physical Therapy Assistant",
				"Analyst Programmer",
				"Staff Scientist",
				"Database Administrator IV",
				"Developer II",
				"Health Coach IV",
				"Mechanical Systems Engineer",
				"Dental Hygienist",
				"Budget/Accounting Analyst II",
				"Human Resources Assistant II",
				"Account Representative II",
				"Biostatistician II",
				"Operator",
				"Analog Circuit Design manager",
				"Geologist II",
				"Systems Administrator II",
				"Junior Executive",
				"Director of Sales",
				"Clinical Specialist",
				"Geological Engineer",
				"Civil Engineer",
				"Executive Secretary",
				"Accountant IV",
				"Accountant III",
				"Biostatistician I",
				"Internal Auditor",
				"Media Manager II",
				"Statistician IV",
				"Tax Accountant",
				"Assistant Media Planner",
				"Research Assistant II",
				"Chief Design Engineer",
				"General Manager",
				"Safety Technician IV",
				"VP Accounting",
				"Statistician I",
				"Sales Associate",
				"Occupational Therapist",
				"VP Quality Control",
				"Administrative Assistant IV",
				"Office Assistant I",
				"Systems Administrator I",
				"Media Manager III",
				"Research Assistant III",
				"Accountant I",
				"Statistician III",
				"Computer Systems Analyst IV",
				"Safety Technician III"
			]
		}
	],
	"_useReadCommands" : true,
	"_cursorid" : NumberLong(0),
	"_batchSize" : undefined,
	"_maxAwaitTimeMS" : undefined,
	"_txnNumber" : undefined,
	"_ns" : "nbd.people",
	"_db" : nbd,
	"_collName" : "people",
	"_cursorHandle" : {
		
	},
	"isClosed" : function() {
    if (this._useReadCommands) {
        return bsonWoCompare({_: this._cursorid}, {_: NumberLong(0)}) === 0;
    }
    return this._cursor.isClosed();
},
	"isExhausted" : function() {
    return this.isClosed() && this.objsLeftInBatch() === 0;
},
	"close" : function() {
    if (!this._useReadCommands) {
        this._cursor.close();
    } else if (bsonWoCompare({_: this._cursorid}, {_: NumberLong(0)}) !== 0) {
        var killCursorCmd = {
            killCursors: this._collName,
            cursors: [this._cursorid],
        };
        var cmdRes = this._db.runCommand(killCursorCmd);
        if (cmdRes.ok != 1) {
            throw _getErrorWithCode(cmdRes, "killCursors command failed: " + tojson(cmdRes));
        }

        this._cursorHandle.zeroCursorId();
        this._cursorid = NumberLong(0);
    }
},
	"_updatePostBatchResumeToken" : function(cursorObj) {
    if (cursorObj.postBatchResumeToken) {
        this._postBatchResumeToken = cursorObj.postBatchResumeToken;
        if ((cursorObj.firstBatch || cursorObj.nextBatch).length === 0) {
            this._resumeToken = this._postBatchResumeToken;
        }
        this._isChangeStream = true;
    }
},
	"_runGetMoreCommand" : function() {
    // Construct the getMore command.
    var getMoreCmd = {getMore: this._cursorid, collection: this._collName};

    if (this._batchSize) {
        getMoreCmd["batchSize"] = this._batchSize;
    }

    // maxAwaitTimeMS is only supported when using read commands.
    if (this._maxAwaitTimeMS) {
        getMoreCmd.maxTimeMS = this._maxAwaitTimeMS;
    }

    if (this._txnNumber) {
        getMoreCmd.txnNumber = NumberLong(this._txnNumber);
        getMoreCmd.autocommit = false;
    }

    // Deliver the getMore command, and check for errors in the response.
    var cmdRes = this._db.runCommand(getMoreCmd);
    assert.commandWorked(cmdRes, () => "getMore command failed: " + tojson(cmdRes));

    if (this._ns !== cmdRes.cursor.ns) {
        throw Error("unexpected collection in getMore response: " + this._ns +
                    " != " + cmdRes.cursor.ns);
    }

    if (!cmdRes.cursor.id.compare(NumberLong("0"))) {
        this._cursorHandle.zeroCursorId();
        this._cursorid = NumberLong("0");
    } else if (this._cursorid.compare(cmdRes.cursor.id)) {
        throw Error("unexpected cursor id: " + this._cursorid.toString() +
                    " != " + cmdRes.cursor.id.toString());
    }

    // If the command result represents a change stream cursor, update our postBatchResumeToken.
    this._updatePostBatchResumeToken(cmdRes.cursor);

    // Successfully retrieved the next batch.
    this._batch = cmdRes.cursor.nextBatch.reverse();
},
	"_hasNextUsingCommands" : function() {
    assert(this._useReadCommands);

    if (!this._batch.length) {
        if (!this._cursorid.compare(NumberLong("0"))) {
            return false;
        }

        this._runGetMoreCommand();
    }

    return this._batch.length > 0;
},
	"hasNext" : function() {
    if (this._useReadCommands) {
        return this._hasNextUsingCommands();
    }

    return this._batch.length || this._cursor.hasNext();
},
	"next" : function() {
    if (this._batch.length) {
        // Pop the next result off the batch.
        const nextDoc = this._batch.pop();
        if (this._isChangeStream) {
            // If this is the last result in the batch, the postBatchResumeToken becomes the current
            // resume token for the cursor. Otherwise, the resume token is the _id of 'nextDoc'.
            this._resumeToken = (this._batch.length ? nextDoc._id : this._postBatchResumeToken);
        }
        return nextDoc;
    } else if (this._useReadCommands) {
        // Have to call hasNext() here, as this is where we may issue a getMore in order to retrieve
        // the next batch of results.
        if (!this.hasNext())
            throw Error("error hasNext: false");
        return this._batch.pop();
    } else {
        if (!this._cursor.hasNext())
            throw Error("error hasNext: false");

        var ret = this._cursor.next();
        if (ret.$err)
            throw _getErrorWithCode(ret, "error: " + tojson(ret));
        return ret;
    }
},
	"objsLeftInBatch" : function() {
    if (this._useReadCommands) {
        return this._batch.length;
    } else if (this._batch.length) {
        return this._batch.length;
    } else {
        return this._cursor.objsLeftInBatch();
    }
},
	"getId" : function() {
    return this._cursorid;
},
	"getResumeToken" : function() {
    // Return the most recent recorded resume token, if such a token exists.
    return this._resumeToken;
},
	"help" : function() {
    // This is the same as the "Cursor Methods" section of DBQuery.help().
    print("\nCursor methods");
    print("\t.toArray() - iterates through docs and returns an array of the results");
    print("\t.forEach( func )");
    print("\t.map( func )");
    print("\t.hasNext()");
    print("\t.next()");
    print(
        "\t.objsLeftInBatch() - returns count of docs left in current batch (when exhausted, a new getMore will be issued)");
    print("\t.itcount() - iterates through documents and counts them");
    print(
        "\t.getResumeToken() - for a change stream cursor, obtains the most recent valid resume token, if it exists.");
    print("\t.pretty() - pretty print each document, possibly over multiple lines");
    print("\t.close()");
},
	"toArray" : function() {
    if (this._arr)
        return this._arr;

    var a = [];
    while (this.hasNext())
        a.push(this.next());
    this._arr = a;
    return a;
},
	"forEach" : function(func) {
    while (this.hasNext())
        func(this.next());
},
	"map" : function(func) {
    var a = [];
    while (this.hasNext())
        a.push(func(this.next()));
    return a;
},
	"itcount" : function() {
    var num = 0;

    // Track how many bytes we've used this cursor to iterate iterated.  This function can be called
    // with some very large cursors.  SpiderMonkey appears happy to allow these objects to
    // accumulate, so regular gc() avoids an overly large memory footprint.
    //
    // TODO: migrate this function into c++
    var bytesSinceGC = 0;

    while (this.hasNext()) {
        num++;
        var nextDoc = this.next();
        bytesSinceGC += Object.bsonsize(nextDoc);

        // Garbage collect every 10 MB.
        if (bytesSinceGC > (10 * 1024 * 1024)) {
            bytesSinceGC = 0;
            gc();
        }
    }
    return num;
},
	"shellPrint" : function() {
    try {
        var start = new Date().getTime();
        var n = 0;
        while (this.hasNext() && n < DBQuery.shellBatchSize) {
            var s = this._prettyShell ? tojson(this.next()) : tojson(this.next(), "", true);
            print(s);
            n++;
        }
        if (typeof _verboseShell !== 'undefined' && _verboseShell) {
            var time = new Date().getTime() - start;
            print("Fetched " + n + " record(s) in " + time + "ms");
        }
        if (this.hasNext()) {
            print("Type \"it\" for more");
            ___it___ = this;
        } else {
            ___it___ = null;
        }
    } catch (e) {
        print(e);
    }
},
	"pretty" : function() {
    this._prettyShell = true;
    return this;
}
}
